{"version":3,"sources":["App/Form/Form.tsx","Util/time.ts","App/Results/JourneyResult/LegResult/StopTimeResult/StopTimeResult.tsx","App/Results/JourneyResult/LegResult/LegResult.tsx","App/Results/JourneyResult/JourneyResult.tsx","App/Results/Results.tsx","serviceWorker.ts","index.tsx","App/App.tsx"],"names":["Form","_ref","onSubmit","_useState","useState","_useState2","Object","slicedToArray","origin","setOrigin","_useState3","_useState4","destination","setDestination","_useState5","Date","_useState6","date","setDate","_useState7","_useState8","time","setTime","useEffect","length","react","placeholder","value","onChange","e","target","name","type","toJSON","slice","toTimeString","seconds","hours","Math","floor","hoursPad","mins","StopTimeResult","stopTime","dropOff","arrivalTime","pickUp","departureTime","stop","LegResult","leg","stopTimes","map","st","i","key","JourneyResult","items","journey","_firstAndLast","legs","_firstAndLast2","fLeg","lLeg","l","Results","results","loading","j","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","setResults","setLoading","_onFormSubmit","asyncToGenerator","regenerator_default","mark","_callee","form","params","response","wrap","_context","prev","next","entries","kv","join","axios","sent","data","journeys","this","apply","arguments","className","_x","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1935f982.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { useState, useEffect } from \"react\";\n\nexport function Form({ onSubmit }: FormInputProps) {\n  const [origin, setOrigin] = useState(\"\");\n  const [destination, setDestination] = useState(\"\");\n  const [date, setDate] = useState(new Date());\n  const [time, setTime] = useState(\"1400\");\n\n  useEffect(() => {\n    if (origin.length > 2 && destination.length > 2 && time.length === 4) {\n      onSubmit({ origin, destination, date, time });\n    }\n  }, [origin, destination, date, time]);\n\n  return (\n    <div>\n      <input placeholder=\"origin\" value={origin} onChange={e => setOrigin(e.target.value)} name=\"origin\" type=\"text\"/>\n      <input placeholder=\"destination\" value={destination} onChange={e => setDestination(e.target.value)} name=\"destination\" type=\"text\"/>\n      <input placeholder=\"date\" value={date.toJSON().slice(0, 10)} onChange={e => setDate(new Date(e.target.value))} name=\"date\" type=\"date\"/>\n      <input placeholder=\"time\" value={time} onChange={e => setTime(e.target.value)} name=\"time\" type=\"text\"/>\n    </div>\n  )\n}\n\nexport interface FormInputProps {\n  onSubmit: (form: FormData) => any\n}\n\nexport interface FormData {\n  origin: string,\n  destination: string,\n  date: Date,\n  time: string\n}\n","\nexport function toTimeString(seconds: number) {\n  const hours = Math.floor(seconds / 3600);\n  const hoursPad = hours < 10 ? \"0\" : \"\";\n  const mins = Math.floor((seconds % 3600) / 60);\n  const minsPad = mins < 10 ? \"0\" : \"\";\n\n  return hoursPad + hours + \":\" + minsPad + mins;\n}\n\n7200\n","\nimport * as React from \"react\";\nimport { toTimeString } from \"../../../../../Util/time\";\n\nexport function StopTimeResult({ stopTime }: StopTimeResultProps) {\n  return (\n    <li>\n      {stopTime.dropOff ? toTimeString(stopTime.arrivalTime) : \"--:--\"}\n      {stopTime.pickUp ? toTimeString(stopTime.departureTime) : \"--:--\"}\n      {stopTime.stop}\n    </li>\n  );\n}\n\nexport interface StopTimeResultProps {\n  stopTime: StopTime\n}\n\nexport interface StopTime {\n  stop: string,\n  departureTime: number,\n  arrivalTime: number,\n  pickUp: boolean,\n  dropOff: boolean\n}\n","\nimport * as React from \"react\";\nimport { StopTime, StopTimeResult } from \"./StopTimeResult/StopTimeResult\";\n\nexport function LegResult({ leg }: LegResultProps) {\n  return (\n    <div>\n      <h3>{leg.origin} - {leg.destination}</h3>\n      <ul>\n        { leg.stopTimes && leg.stopTimes.map((st, i) => <StopTimeResult key={i} stopTime={st} />)}\n      </ul>\n    </div>\n  );\n}\n\nexport interface LegResultProps {\n  leg: Leg\n}\n\nexport interface Leg {\n  origin: string,\n  destination: string,\n  stopTimes: StopTime[]\n}\n","\nimport * as React from \"react\";\nimport { Leg, LegResult } from \"./LegResult/LegResult\";\nimport { toTimeString } from \"../../../Util/time\";\n\nexport function JourneyResult({ journey }: JourneyResultProps) {\n  const [fLeg, lLeg] = firstAndLast(journey.legs);\n\n  return (\n    <div>\n      <div>\n        {fLeg.origin} ({toTimeString(journey.departureTime)}) - ({toTimeString(journey.arrivalTime)}) {lLeg.destination}\n      </div>\n      <div>\n        {journey.legs.map((l, i) => <LegResult key={i} leg={l}/>)}\n      </div>\n    </div>\n  )\n}\n\nexport interface JourneyResultProps {\n  journey: Journey\n}\n\nexport interface Journey {\n  legs: Leg[],\n  departureTime: number,\n  arrivalTime: number\n}\n\nfunction firstAndLast<T>(items: T[]): [T, T] {\n  return [items[0], items[items.length - 1]];\n}\n\n","import * as React from \"react\";\nimport { JourneyResult } from \"./JourneyResult/JourneyResult\";\n\nexport function Results({ results, loading }: FormResultsProps) {\n  return (\n    <div>\n      <h1>Results</h1>\n      <div>{ loading ? \"Loading\" : results.map((j, i) => <JourneyResult key={i} journey={j} />)}</div>\n    </div>\n  );\n}\n\nexport interface FormResultsProps {\n  results: any[],\n  loading: boolean\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as React from \"react\";\nimport axios from \"axios\";\nimport { Form, FormData } from \"./Form/Form\";\nimport { useState, useEffect } from \"react\";\nimport { Results } from \"./Results/Results\";\nimport \"./App.css\";\n\nexport function App() {\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  async function onFormSubmit(form: FormData) {\n    setLoading(true);\n\n    const params = Object\n      .entries(form)\n      .map(kv => kv.join(\"=\"))\n      .join(\"&\");\n\n    const response = await axios(\"/jp?\" + params);\n\n    setResults(response.data.data.journeys);\n    setLoading(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <Form onSubmit={onFormSubmit}/>\n      <Results results={results} loading={loading}/>\n    </div>\n  )\n}\n"],"sourceRoot":""}
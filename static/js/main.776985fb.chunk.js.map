{"version":3,"sources":["App/Form/StopSelector/StopSelector.tsx","App/Form/Form.tsx","Util/time.ts","App/Results/JourneyResult/LegResult/StopTimeResult/StopTimeResult.tsx","App/Results/JourneyResult/LegResult/LegResult.tsx","App/Results/JourneyResult/JourneyResult.tsx","App/Results/Results.tsx","serviceWorker.ts","Config/local.ts","Config/production.ts","index.tsx","Container/Container.ts","App/App.tsx"],"names":["Autosuggest","require","StopSelector","_ref","id","stops","value","onChange","_useState","useState","data","_useState2","Object","slicedToArray","suggestions","setSuggestions","_useState3","_useState4","inputValue","setInputValue","react_default","a","createElement","highlightFirstSuggestion","getSuggestionValue","renderSuggestion","onSuggestionsFetchRequested","_ref4","trim","toUpperCase","inputLength","length","results","filter","l","code","name","startsWith","onSuggestionsClearRequested","onSuggestionSelected","event","_ref2","suggestion","inputProps","placeholder","_ref3","newValue","Form","onSubmit","origin","setOrigin","destination","setDestination","_useState5","Date","_useState6","date","setDate","_useState7","_useState8","time","setTime","useEffect","react","StopSelector_StopSelector","toJSON","slice","e","target","type","toTimeString","seconds","hours","Math","floor","hoursPad","mins","StopTimeResult","stopTime","dropOff","arrivalTime","pickUp","departureTime","stop","LegResult","leg","stopTimes","map","st","i","key","JourneyResult","items","journey","_firstAndLast","legs","_firstAndLast2","fLeg","lLeg","Results","loading","j","Boolean","window","location","hostname","match","local","apiBaseUrl","production","container","Container","classCallCheck","this","createClass","Axios","create","baseURL","config","get","process","ENV","ReactDOM","render","api","setResults","setLoading","_onFormSubmit","asyncToGenerator","regenerator_default","mark","_callee","form","params","response","wrap","_context","prev","next","entries","kv","join","sent","journeys","apply","arguments","className","_x","getApi","getStops","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.776985fb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport './StopSelector.css';\n\nconst Autosuggest = require(\"react-autosuggest\");\n\nexport function StopSelector({ id, value, stops, onChange }: StopSelectorProps) {\n  const [suggestions, setSuggestions] = useState(stops.data);\n  const [inputValue, setInputValue] = useState('');\n\n  const onSelectedChange = (event: any, { suggestion }: any) => {\n    onChange(suggestion.id);\n  };\n\n  const onInputChange = (event: any, { newValue }: any) => {\n    setInputValue(newValue);\n  };\n\n  const onSuggestionsFetchRequested = ({ value } : any) => {\n    const inputValue = value.trim().toUpperCase();\n    const inputLength = inputValue.length;\n    const results = inputLength < 3 ? [] : stops.data.filter(l =>\n      (inputLength <= 4 && inputValue === l.code) || l.name.toUpperCase().startsWith(inputValue)\n    );\n\n    setSuggestions(results);\n  };\n\n  const onSuggestionsClearRequested = () => {\n    setSuggestions(stops.data);\n  };\n\n  return (\n    <Autosuggest\n      highlightFirstSuggestion={true}\n      suggestions={suggestions}\n      getSuggestionValue={getSuggestionValue}\n      renderSuggestion={renderSuggestion}\n      onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n      onSuggestionsClearRequested={onSuggestionsClearRequested}\n      onSuggestionSelected={onSelectedChange}\n      inputProps={{\n        value: inputValue,\n        id: id,\n        placeholder: id,\n        onChange: onInputChange\n      }}\n    />\n  );\n}\n\nfunction getSuggestionValue(suggestion: Stop) {\n  return suggestion.name;\n}\n\nfunction renderSuggestion(suggestion: Stop) {\n  return (\n    <span>{suggestion.name}</span>\n  );\n}\n\nexport interface StopData {\n  data: Stop[]\n}\n\nexport interface Stop {\n  name: string,\n  description: string,\n  longitude: string,\n  latitude: string,\n  id: string,\n  code: string\n}\n\nexport interface StopSelectorProps {\n  id: string,\n  value: string,\n  stops: StopData,\n  onChange: (value: string) => any\n}\n","import * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { StopData, StopSelector } from \"./StopSelector/StopSelector\";\n\nexport function Form({ onSubmit, stops }: FormInputProps) {\n  const [origin, setOrigin] = useState(\"\");\n  const [destination, setDestination] = useState(\"\");\n  const [date, setDate] = useState(new Date());\n  const [time, setTime] = useState(\"1400\");\n\n  useEffect(() => {\n    if (origin.length > 2 && destination.length > 2 && time.length === 4) {\n      onSubmit({ origin, destination, date, time });\n    }\n  }, [origin, destination, date, time]);\n\n  return (\n    <div>\n      <StopSelector id=\"origin\" value={origin} onChange={setOrigin} stops={stops} />\n      <StopSelector id=\"destination\" value={destination} onChange={setDestination} stops={stops} />\n      {/*<input placeholder=\"origin\" value={origin} onChange={e => setOrigin(e.target.value)} name=\"origin\" type=\"text\"/>*/}\n      {/*<input placeholder=\"destination\" value={destination} onChange={e => setDestination(e.target.value)} name=\"destination\" type=\"text\"/>*/}\n      <input placeholder=\"date\" value={date.toJSON().slice(0, 10)} onChange={e => setDate(new Date(e.target.value))} name=\"date\" type=\"date\"/>\n      <input placeholder=\"time\" value={time} onChange={e => setTime(e.target.value)} name=\"time\" type=\"text\"/>\n    </div>\n  )\n}\n\nexport interface FormInputProps {\n  onSubmit: (form: FormData) => any,\n  stops: StopData\n}\n\nexport interface FormData {\n  origin: string,\n  destination: string,\n  date: Date,\n  time: string\n}\n","\nexport function toTimeString(seconds: number) {\n  const hours = Math.floor(seconds / 3600);\n  const hoursPad = hours < 10 ? \"0\" : \"\";\n  const mins = Math.floor((seconds % 3600) / 60);\n  const minsPad = mins < 10 ? \"0\" : \"\";\n\n  return hoursPad + hours + \":\" + minsPad + mins;\n}\n\n7200\n","\nimport * as React from \"react\";\nimport { toTimeString } from \"../../../../../Util/time\";\n\nexport function StopTimeResult({ stopTime }: StopTimeResultProps) {\n  return (\n    <li>\n      {stopTime.dropOff ? toTimeString(stopTime.arrivalTime) : \"--:--\"}\n      {stopTime.pickUp ? toTimeString(stopTime.departureTime) : \"--:--\"}\n      {stopTime.stop}\n    </li>\n  );\n}\n\nexport interface StopTimeResultProps {\n  stopTime: StopTime\n}\n\nexport interface StopTime {\n  stop: string,\n  departureTime: number,\n  arrivalTime: number,\n  pickUp: boolean,\n  dropOff: boolean\n}\n","\nimport * as React from \"react\";\nimport { StopTime, StopTimeResult } from \"./StopTimeResult/StopTimeResult\";\n\nexport function LegResult({ leg }: LegResultProps) {\n  return (\n    <div>\n      <h3>{leg.origin} - {leg.destination}</h3>\n      <ul>\n        { leg.stopTimes && leg.stopTimes.map((st, i) => <StopTimeResult key={i} stopTime={st} />)}\n      </ul>\n    </div>\n  );\n}\n\nexport interface LegResultProps {\n  leg: Leg\n}\n\nexport interface Leg {\n  origin: string,\n  destination: string,\n  stopTimes: StopTime[]\n}\n","\nimport * as React from \"react\";\nimport { Leg, LegResult } from \"./LegResult/LegResult\";\nimport { toTimeString } from \"../../../Util/time\";\n\nexport function JourneyResult({ journey }: JourneyResultProps) {\n  const [fLeg, lLeg] = firstAndLast(journey.legs);\n\n  return (\n    <div>\n      <div>\n        {fLeg.origin} ({toTimeString(journey.departureTime)}) - ({toTimeString(journey.arrivalTime)}) {lLeg.destination}\n      </div>\n      <div>\n        {journey.legs.map((l, i) => <LegResult key={i} leg={l}/>)}\n      </div>\n    </div>\n  )\n}\n\nexport interface JourneyResultProps {\n  journey: Journey\n}\n\nexport interface Journey {\n  legs: Leg[],\n  departureTime: number,\n  arrivalTime: number\n}\n\nfunction firstAndLast<T>(items: T[]): [T, T] {\n  return [items[0], items[items.length - 1]];\n}\n\n","import * as React from \"react\";\nimport { JourneyResult } from \"./JourneyResult/JourneyResult\";\n\nexport function Results({ results, loading }: FormResultsProps) {\n  return (\n    <div>\n      <h1>Results</h1>\n      <div>{ loading ? \"Loading\" : results.map((j, i) => <JourneyResult key={i} journey={j} />)}</div>\n    </div>\n  );\n}\n\nexport interface FormResultsProps {\n  results: any[],\n  loading: boolean\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nexport const local = {\n  apiBaseUrl: \"http://localhost:8008/\"\n};\n","\nexport const production = {\n  apiBaseUrl: \"https://api.one-way.to/\"\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Container } from \"./Container/Container\";\n\nconst container = new Container();\n\nReactDOM.render(<App api={container.getApi()} stops={container.getStops()}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import Axios, { AxiosInstance } from \"axios\";\nimport { Config } from \"../Config/config\";\nimport { local } from \"../Config/local\";\nimport { production } from \"../Config/production\";\nimport { StopData } from \"../App/Form/StopSelector/StopSelector\";\nimport stops from \"../Data/stops.json\";\n\nexport class Container {\n\n  public getApi(): AxiosInstance {\n    return Axios.create({\n      baseURL: this.config.apiBaseUrl\n    });\n  }\n\n  public get config(): Config {\n    switch (process.env.ENV) {\n      case \"local\": return local;\n      default: return production;\n    }\n  }\n\n  public getStops(): StopData {\n    return stops;\n  }\n\n}\n","import * as React from \"react\";\nimport { AxiosInstance } from \"axios\";\nimport { Form, FormData } from \"./Form/Form\";\nimport { useState } from \"react\";\nimport { Results } from \"./Results/Results\";\nimport \"./App.css\";\nimport { StopData } from \"./Form/StopSelector/StopSelector\";\n\nexport function App({ api, stops }: AppProps) {\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  async function onFormSubmit(form: FormData) {\n    setLoading(true);\n\n    const params = Object\n      .entries(form)\n      .map(kv => kv.join(\"=\"))\n      .join(\"&\");\n\n    const response = await api(\"/jp?\" + params);\n\n    setResults(response.data.data.journeys);\n    setLoading(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <Form onSubmit={onFormSubmit} stops={stops}/>\n      <Results results={results} loading={loading}/>\n    </div>\n  )\n}\n\nexport interface AppProps {\n  api: AxiosInstance,\n  stops: StopData\n}\n"],"sourceRoot":""}
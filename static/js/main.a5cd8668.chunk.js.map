{"version":3,"sources":["App/Form/StopSelector/StopSelector.tsx","App/Form/Form.tsx","Util/time.ts","Util/stop.ts","App/Results/JourneyResult/LegResult/StopTimeResult/StopTimeResult.tsx","App/Results/JourneyResult/LegResult/LegResult.tsx","App/Results/JourneyResult/JourneyResult.tsx","App/Results/Results.tsx","serviceWorker.ts","Config/production.ts","Container/Container.ts","index.tsx","App/App.tsx"],"names":["Autosuggest","require","StopSelector","_ref","id","stops","value","onChange","_useState","useState","_useState2","Object","slicedToArray","suggestions","setSuggestions","_useState3","_useState4","inputValue","setInputValue","react_default","a","createElement","className","highlightFirstSuggestion","getSuggestionValue","renderSuggestion","onSuggestionsFetchRequested","_ref4","trim","toUpperCase","results","length","filter","_ref5","_ref6","includes","sort","b","onSuggestionsClearRequested","onSuggestionSelected","event","_ref2","suggestion","inputProps","placeholder","_ref3","newValue","_ref7","_ref8","_ref9","_ref10","name","Form","onSubmit","origin","setOrigin","destination","setDestination","_useState5","Date","_useState6","date","setDate","_useState7","_useState8","time","setTime","useEffect","toISOString","substr","react","StopSelector_StopSelector","toJSON","slice","e","target","type","toTimeString","seconds","hours","Math","floor","hoursPad","mins","stopNames","reduce","index","stopName","stopId","StopTimeResult","stopTime","dropOff","arrivalTime","departureTime","stop","LegResult","leg","transferText","duration","stopTimes","st","pickUp","map","i","key","JourneyResult","items","journey","_firstAndLast","legs","_firstAndLast2","fLeg","lLeg","l","Results","loading","j","Boolean","window","location","hostname","match","production","apiBaseUrl","Container","classCallCheck","this","createClass","Axios","create","baseURL","config","groups","get","container","ReactDOM","render","api","setResults","setLoading","_onFormSubmit","asyncToGenerator","regenerator_default","mark","_callee","form","params","response","wrap","_context","prev","next","entries","kv","join","sent","data","journeys","apply","arguments","Form_Form","_x","getApi","getStopGroups","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a5cd8668.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport './StopSelector.css';\n\nconst Autosuggest = require(\"react-autosuggest\");\n\nexport function StopSelector({ id, value, stops, onChange }: StopSelectorProps) {\n  const [suggestions, setSuggestions] = useState(stops);\n  const [inputValue, setInputValue] = useState('');\n\n  const onSelectedChange = (event: any, { suggestion }: any) => {\n    onChange(suggestion[0]);\n  };\n\n  const onInputChange = (event: any, { newValue }: any) => {\n    setInputValue(newValue);\n  };\n\n  const onSuggestionsFetchRequested = ({ value } : any) => {\n    const inputValue = value.trim().toUpperCase();\n    const inputLength = inputValue.length;\n    const results = inputLength < 3 ? [] : stops.filter(([id, name]) =>\n      name.toUpperCase().includes(inputValue)\n    );\n\n    results.sort((a, b) => a[1].length - b[1].length);\n\n    setSuggestions(results);\n  };\n\n  const onSuggestionsClearRequested = () => {\n    setSuggestions(stops);\n  };\n\n  return (\n    <div className=\"col-3\">\n      <Autosuggest\n        highlightFirstSuggestion={true}\n        suggestions={suggestions}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={onSuggestionsClearRequested}\n        onSuggestionSelected={onSelectedChange}\n        inputProps={{\n          value: inputValue,\n          id: id,\n          placeholder: id,\n          onChange: onInputChange\n        }}\n      />\n    </div>\n  );\n}\n\nfunction getSuggestionValue([id, name]: Stop) {\n  return name;\n}\n\nfunction renderSuggestion([id, name]: Stop) {\n  return (\n    <span>{name}</span>\n  );\n}\n\nexport type StopData = Stop[];\n\nexport type Stop = [string, string];\n\nexport interface StopSelectorProps {\n  id: string,\n  value: string,\n  stops: StopData,\n  onChange: (value: string) => any\n}\n","import * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { StopData, StopSelector } from \"./StopSelector/StopSelector\";\n\nimport \"./Form.css\";\n\nexport function Form({ onSubmit, stops }: FormInputProps) {\n  const [origin, setOrigin] = useState(\"\");\n  const [destination, setDestination] = useState(\"\");\n  const [date, setDate] = useState(new Date());\n  const [time, setTime] = useState(\"0600\");\n\n  useEffect(() => {\n    if (origin.length > 2 && destination.length > 2 && time.length === 4) {\n      onSubmit({ origin, destination, time, date: date.toISOString().substr(0, 10) });\n    }\n  }, [origin, destination, date, time]);\n\n  return (\n    <div className=\"row Form\">\n      <StopSelector id=\"origin\" value={origin} onChange={setOrigin} stops={stops} />\n      <StopSelector id=\"destination\" value={destination} onChange={setDestination} stops={stops} />\n      <div className=\"col-3\">\n        <input placeholder=\"date\" value={date.toJSON().slice(0, 10)} onChange={e => setDate(new Date(e.target.value))} name=\"date\" type=\"date\"/>\n      </div>\n      <div className=\"col-3\">\n        <input placeholder=\"time\" value={time} onChange={e => setTime(e.target.value)} name=\"time\" type=\"text\"/>\n      </div>\n    </div>\n  )\n}\n\nexport interface FormInputProps {\n  onSubmit: (form: FormData) => any,\n  stops: StopData\n}\n\nexport interface FormData {\n  origin: string,\n  destination: string,\n  date: string,\n  time: string\n}\n","\nexport function toTimeString(seconds: number) {\n  const hours = Math.floor(seconds / 3600);\n  const hoursPad = hours < 10 ? \"0\" : \"\";\n  const mins = Math.floor((seconds % 3600) / 60);\n  const minsPad = mins < 10 ? \"0\" : \"\";\n\n  return hoursPad + hours + \":\" + minsPad + mins;\n}\n\nexport function toMins(seconds: number) {\n  return Math.floor(seconds / 60) + \" mins\";\n}\n","\nimport stops from \"../Data/stops.json\";\n\nconst stopNames: Record<string, string> = stops.reduce((index, [id, name]) => {\n  index[id] = name;\n\n  return index;\n}, {} as Record<string, string>);\n\nexport function stopName(stopId: string): string {\n  return stopNames[stopId];\n}\n","\nimport * as React from \"react\";\nimport { toTimeString } from \"../../../../../Util/time\";\nimport { stopName } from \"../../../../../Util/stop\";\n\nexport function StopTimeResult({ stopTime }: StopTimeResultProps) {\n  return (\n    <li>\n      {stopTime.dropOff ? toTimeString(stopTime.arrivalTime) : toTimeString(stopTime.departureTime) }\n      {\" \" + stopName(stopTime.stop)}\n    </li>\n  );\n}\n\nexport interface StopTimeResultProps {\n  stopTime: StopTime\n}\n\nexport interface StopTime {\n  stop: string,\n  departureTime: number,\n  arrivalTime: number,\n  pickUp: boolean,\n  dropOff: boolean\n}\n","\nimport * as React from \"react\";\nimport { StopTime, StopTimeResult } from \"./StopTimeResult/StopTimeResult\";\nimport { stopName } from \"../../../../Util/stop\";\nimport { toMins } from \"../../../../Util/time\";\n\nexport function LegResult({ index, leg }: LegResultProps) {\n  const transferText = leg.duration ? \"(\" + toMins(leg.duration) + \" transfer)\": \"\"\n  ;\n  return (\n    <div>\n      <h3>Leg {index + 1}: {stopName(leg.origin)} - {stopName(leg.destination)} {transferText}</h3>\n      <ul>\n        { leg.stopTimes\n          && leg.stopTimes\n            .filter(st => st.dropOff || st.pickUp)\n            .map((st, i) => <StopTimeResult key={i} stopTime={st} />)}\n      </ul>\n    </div>\n  );\n}\n\nexport interface LegResultProps {\n  leg: Leg,\n  index: number\n}\n\nexport interface Leg {\n  origin: string,\n  destination: string,\n  stopTimes: StopTime[]\n  duration?: number\n}\n","\nimport * as React from \"react\";\nimport { Leg, LegResult } from \"./LegResult/LegResult\";\nimport { toTimeString } from \"../../../Util/time\";\nimport { stopName } from \"../../../Util/stop\";\n\nexport function JourneyResult({ journey }: JourneyResultProps) {\n  const [fLeg, lLeg] = firstAndLast(journey.legs);\n\n  return (\n    <div>\n      <h2>\n        {stopName(fLeg.origin)} ({toTimeString(journey.departureTime)}) - ({toTimeString(journey.arrivalTime)}) {stopName(lLeg.destination)}\n      </h2>\n      <div>\n        {journey.legs.map((l, i) => <LegResult index={i} key={i} leg={l}/>)}\n      </div>\n    </div>\n  )\n}\n\nexport interface JourneyResultProps {\n  journey: Journey\n}\n\nexport interface Journey {\n  legs: Leg[],\n  departureTime: number,\n  arrivalTime: number\n}\n\nfunction firstAndLast<T>(items: T[]): [T, T] {\n  return [items[0], items[items.length - 1]];\n}\n\n","import * as React from \"react\";\nimport { JourneyResult } from \"./JourneyResult/JourneyResult\";\n\nexport function Results({ results, loading }: FormResultsProps) {\n  return (\n    <div>\n      <h1>Results</h1>\n      <div>{\n        loading\n          ? \"Loading\"\n          : results.length === 0\n            ? \"No results\"\n            : results.map((j, i) => <JourneyResult key={i} journey={j} />)\n      }</div>\n    </div>\n  );\n}\n\nexport interface FormResultsProps {\n  results: any[],\n  loading: boolean\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nexport const production = {\n  apiBaseUrl: \"https://api.one-way.to/\"\n};\n","import Axios, { AxiosInstance } from \"axios\";\nimport { Config } from \"../Config/config\";\nimport { development } from \"../Config/development\";\nimport { production } from \"../Config/production\";\nimport { StopData } from \"../App/Form/StopSelector/StopSelector\";\nimport groups from \"../Data/groups.json\";\n\nexport class Container {\n\n  public getApi(): AxiosInstance {\n    return Axios.create({\n      baseURL: this.config.apiBaseUrl\n    });\n  }\n\n  public get config(): Config {\n    switch (process.env.NODE_ENV) {\n      case \"development\": return development;\n      default: return production;\n    }\n  }\n\n  public getStopGroups(): StopData {\n    return groups as StopData;\n  }\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Container } from \"./Container/Container\";\n\nimport \"bootstrap/dist/css/bootstrap-grid.min.css\"\n\nconst container = new Container();\n\nReactDOM.render(<App api={container.getApi()} stops={container.getStopGroups()}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as React from \"react\";\nimport { AxiosInstance } from \"axios\";\nimport { Form, FormData } from \"./Form/Form\";\nimport { useState } from \"react\";\nimport { Results } from \"./Results/Results\";\nimport \"./App.css\";\nimport { StopData } from \"./Form/StopSelector/StopSelector\";\n\nexport function App({ api, stops }: AppProps) {\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  async function onFormSubmit(form: FormData) {\n    setLoading(true);\n\n    const params = Object\n      .entries(form)\n      .map(kv => kv.join(\"=\"))\n      .join(\"&\");\n\n    const response = await api(\"/jp?\" + params);\n\n    setResults(response.data.data.journeys);\n    setLoading(false);\n  }\n\n  return (\n    <div className=\"container App\">\n      <Form onSubmit={onFormSubmit} stops={stops}/>\n      <Results results={results} loading={loading}/>\n    </div>\n  )\n}\n\nexport interface AppProps {\n  api: AxiosInstance,\n  stops: StopData\n}\n"],"sourceRoot":""}